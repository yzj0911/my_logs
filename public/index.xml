<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>YZJ 的博客</title>
        <link>http://example.org/</link>
        <description>Hello 来了就别走了，进来留下文章</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>935669265@qq.com (yzj)</managingEditor>
            <webMaster>935669265@qq.com (yzj)</webMaster><lastBuildDate>Tue, 10 May 2022 09:33:31 &#43;0800</lastBuildDate>
            <atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>内存逃逸</title>
    <link>http://example.org/%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8/</link>
    <pubDate>Tue, 10 May 2022 09:33:31 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8/</guid>
    <description><![CDATA[内存逃逸 暂时性内存泄漏 获取长字符串中的一段导致长字符串未被释放 获取长slice中的一段导致长slice未被释放 在长slice中新建slice]]></description>
</item><item>
    <title>Redis</title>
    <link>http://example.org/redis/</link>
    <pubDate>Mon, 09 May 2022 13:23:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/redis/</guid>
    <description><![CDATA[redis 简介：Redis ，全称 Remote Dictionary Server ，是一个基于内存的高性能 Key-Value 数据库。 脚本自动安装任意版本 sh redis-install.sh 4.0.10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25]]></description>
</item><item>
    <title>Mysql</title>
    <link>http://example.org/mysql/</link>
    <pubDate>Tue, 26 Apr 2022 14:04:35 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/mysql/</guid>
    <description><![CDATA[Mysql Mysql面试 什么是MySQL MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，属于 Oracle 旗下产品。MySQL 是最流行的关系型]]></description>
</item><item>
    <title>100题</title>
    <link>http://example.org/100%E9%A2%98/</link>
    <pubDate>Wed, 20 Apr 2022 13:48:23 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/100%E9%A2%98/</guid>
    <description><![CDATA[Golang精编100题 能力模型 级别 模型 初级 primary: 熟悉基本语法，能够看懂代码的意图； 在他人指导下能够完成用户故事的开发，编写的代码符合Clean]]></description>
</item><item>
    <title>GMP</title>
    <link>http://example.org/gmp/</link>
    <pubDate>Tue, 12 Apr 2022 21:26:15 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/gmp/</guid>
    <description><![CDATA[GMP模型 M M代表内核级线程,一个M就是一个线程,goroutine就是跑在M之上的;M是一个很大的结构,里面维护了小对象内存cache、当]]></description>
</item><item>
    <title>空切片和nil切片</title>
    <link>http://example.org/%E7%A9%BA%E5%88%87%E7%89%87%E5%92%8Cnil%E5%88%87%E7%89%87/</link>
    <pubDate>Mon, 11 Apr 2022 23:24:19 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/%E7%A9%BA%E5%88%87%E7%89%87%E5%92%8Cnil%E5%88%87%E7%89%87/</guid>
    <description><![CDATA[空切片和nil切片 问题： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import ( &#34;fmt&#34; &#34;reflect&#34; &#34;unsafe&#34; ) func main() { var s1 []int // nil切片 s2 := make([]int,0) // 空切片 s4 := make([]int,0) // 空切片 fmt.Printf(&#34;s1 pointer:%+v, s2 pointer:%+v, s4]]></description>
</item><item>
    <title>Channel</title>
    <link>http://example.org/channel/</link>
    <pubDate>Mon, 11 Apr 2022 23:07:42 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/channel/</guid>
    <description><![CDATA[对未初始化的的chan进行读写，会怎么样？为什么？ 答： 写未初始化的 chan 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main // 写未初始化的chan func main() { var c chan int c]]></description>
</item><item>
    <title>面试题</title>
    <link>http://example.org/for-select%E6%97%B6%E5%A6%82%E6%9E%9C%E9%80%9A%E9%81%93%E5%B7%B2%E7%BB%8F%E5%85%B3%E9%97%AD%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7/</link>
    <pubDate>Mon, 11 Apr 2022 22:52:11 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/for-select%E6%97%B6%E5%A6%82%E6%9E%9C%E9%80%9A%E9%81%93%E5%B7%B2%E7%BB%8F%E5%85%B3%E9%97%AD%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7/</guid>
    <description><![CDATA[1.for select时，如果通道已经关闭会怎么样？如果select中只有一个case呢？ 答： for循环select时，如果其中一个case通道已经]]></description>
</item><item>
    <title>零拷贝</title>
    <link>http://example.org/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</link>
    <pubDate>Mon, 11 Apr 2022 22:21:21 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</guid>
    <description><![CDATA[零拷贝 传统的I/O操作基本上要分为四步： 磁盘文件读入操作系统 操作系统读到用户进程 用户进程写到操作系统 操作系统写入磁盘文件 零拷贝就是指，传输一]]></description>
</item><item>
    <title>etcd的使用实例</title>
    <link>http://example.org/etcd%E7%9A%84%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/</link>
    <pubDate>Mon, 11 Apr 2022 10:17:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/etcd%E7%9A%84%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/</guid>
    <description><![CDATA[etcd的使用实例 etcd有两个版本的接口，v2和v3，且两个版本不兼容，v2已经停止了支持，v3性能更好。 注意 ：etcdctl默认使用v2]]></description>
</item></channel>
</rss>
