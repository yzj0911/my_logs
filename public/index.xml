<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>YZJ 的博客</title>
        <link>http://example.org/</link>
        <description>Hello 来了就别走了，进来留下文章</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>935669265@qq.com (yzj)</managingEditor>
            <webMaster>935669265@qq.com (yzj)</webMaster><lastBuildDate>Fri, 08 Apr 2022 09:49:46 &#43;0800</lastBuildDate>
            <atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>微信支付的接口</title>
    <link>http://example.org/payment/</link>
    <pubDate>Fri, 08 Apr 2022 09:49:46 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/payment/</guid>
    <description><![CDATA[微信支付V3 整理整体流程]]></description>
</item><item>
    <title>gin 常用中间件</title>
    <link>http://example.org/gin/</link>
    <pubDate>Tue, 08 Feb 2022 10:17:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/gin/</guid>
    <description><![CDATA[日志 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // 日志记录到文件 func (d *Handler) LoggerToFile() gin.HandlerFunc { return func(c *gin.Context)]]></description>
</item><item>
    <title>Aix添加和删除Iscsi存储卷</title>
    <link>http://example.org/aix1/</link>
    <pubDate>Fri, 03 Dec 2021 10:17:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/aix1/</guid>
    <description><![CDATA[Aix添加和删除Iscsi存储卷 Aix为6.1版本 使用iscsi存储 首先需要创建一个iscsi target，并共享到IBM Aix上。 检查is]]></description>
</item><item>
    <title>C&#43;&#43;友元</title>
    <link>http://example.org/c-%E5%8F%8B%E5%85%83/</link>
    <pubDate>Fri, 03 Dec 2021 10:17:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/c-%E5%8F%8B%E5%85%83/</guid>
    <description><![CDATA[C++友元 友元说明 相对于其他的编程语言，“友元”是C++中特别的一种语法。那它有什么作用呢？ 其实“友元”就是提供一种访问类私有部分的的方法。]]></description>
</item><item>
    <title>CentOS7 安装 qemu-5.2.0</title>
    <link>http://example.org/centos7_install_qemu/</link>
    <pubDate>Fri, 03 Dec 2021 10:17:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/centos7_install_qemu/</guid>
    <description><![CDATA[CentOS7 安装 qemu-5.2.0 本文介绍在 CentOS7.9 上编译安装 qemu-5.2.0 安装 Python3 编译安装 qemu-5.2.0 依赖 Python3.6 及以上的版本。所以首先安装 Python3.6。这里选择编译安装。 下载 Python3.6.12 从 Python 官网下载 Python3.6.12 源]]></description>
</item><item>
    <title>CentOS下kvm安装</title>
    <link>http://example.org/centos%E4%B8%8Bkvm%E5%AE%89%E8%A3%85/</link>
    <pubDate>Fri, 03 Dec 2021 10:17:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/centos%E4%B8%8Bkvm%E5%AE%89%E8%A3%85/</guid>
    <description><![CDATA[CentOS下kvm安装 注：运行kvm保证机器支持虚拟化且在bios中开启。 准备工作 清除iptables规则 1 2 3 4 # CentOS6 service iptables stop; service iptables save # CentOS7 systemctl stop]]></description>
</item><item>
    <title>Containerd源码分析</title>
    <link>http://example.org/containerd%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
    <pubDate>Fri, 03 Dec 2021 10:17:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/containerd%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
    <description><![CDATA[Containerd源码分析 从 Kubernetes 1.22 开始，k8s 的容器运行是默认替换成 containerd。有必要深入了解 containerd 的内部实现原理。本篇通过分析 containerd 的代]]></description>
</item><item>
    <title>Dblink</title>
    <link>http://example.org/dblink/</link>
    <pubDate>Fri, 03 Dec 2021 10:17:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/dblink/</guid>
    <description><![CDATA[Dblink 查询所有触发器 1 select*fromuser_triggers; 根据名称禁用触发器 1 altertriggerLOGMNRGGC_TRIGGERdisable; 查询所有 job 1 select*fromuser_jobs; 根据 id 禁用 job 1 BEGINdbms_job.broken(4001,true);END; 禁用 oracle dblink 1 2 altersystemsetopen_links=0sid=&#39;$sid&#39;scope=spfile;altersystemsetopen_links_per_instance=0sid=&#39;$sid&#39;scope=spfile; 启用 oracle dblink 1 2 altersystemsetopen_links=4sid=&#39;$sid&#39;scope=spfile;altersystemsetopen_links_per_instance=4sid=&#39;$sid&#39;scope=spfile;]]></description>
</item><item>
    <title>Docker容器和网络架构设计</title>
    <link>http://example.org/docker%E5%AE%B9%E5%99%A8%E5%92%8C%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link>
    <pubDate>Fri, 03 Dec 2021 10:17:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/docker%E5%AE%B9%E5%99%A8%E5%92%8C%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid>
    <description><![CDATA[Docker容器和网络架构设计 常用的容器化技术 Chroot 特点: 改变正在运行的进程和它的子进程根目录。 经chroot设置根目录的程序，不能够对这个指定]]></description>
</item><item>
    <title>etcd的使用实例</title>
    <link>http://example.org/etcd%E7%9A%84%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/</link>
    <pubDate>Fri, 03 Dec 2021 10:17:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/etcd%E7%9A%84%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/</guid>
    <description><![CDATA[etcd的使用实例 etcd 有如下的使用场景： 服务发现（Service Discovery） 消息发布与订阅 负载均衡 分布式通知与协调 分布式锁 分布式队列 集]]></description>
</item></channel>
</rss>
